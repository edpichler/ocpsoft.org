.categories ['OpenSource']
.dateCreated 20130723T20:11:31
.date_modified 20131213T02:34:25
.date_modified_gmt 20131213T07:34:25
.link http://ocpsoft.org/opensource/guide-to-regular-expressions-in-java-part-2/
.mt_allow_comments 1
.mt_allow_pings 1
.mt_excerpt 
.mt_keywords 
.permaLink http://ocpsoft.org/opensource/guide-to-regular-expressions-in-java-part-2/
.post_status publish
.postid 915
.title Guide to Regular Expressions in Java (Part 2)
.userid 3
.wp_author_display_name Lincoln Baxter III
.wp_author_id 3
.wp_more_text 
.wp_password 
.wp_post_format standard
.wp_post_thumbnail 5197
.wp_slug guide-to-regular-expressions-in-java-part-2
[toc][/toc]

Often unknown, or heralded as confusing, regular expressions have defined the standard for powerful text manipulation and search. Without them, many of the applications we know today would not function. This two-part series explores the basics of regular expressions in Java, and provides tutorial examples in the hopes of spreading love for our pattern-matching friends. (Read <a href="http://ocpsoft.com/opensource/guide-to-regular-expressions-in-java-part-1/">part one</a>.)
<!--more-->
<h1>Part 2: Look-ahead &amp; Configuration flags</h1>
Have you ever wanted to find something in a string, but you only wanted to find it when it came before another pattern in that string? Or maybe you wanted to find a piece of text that was not followed by another piece of text? Normally, with standard string searching, you would have to write a somewhat complex function to perform the exact operation you wanted. This can, however, all be done on one line using regular expressions. This chapter will also cover the configuration flags available to modify some of the behaviors of the regular expression patterns language.

<p class="tip alert"><span>This article is part two in the series: "[[Regular Expressions]]." Read <a href="http://ocpsoft.com/opensource/guide-to-regular-expressions-in-java-part-1/">part one</a> for more information on basic matching, grouping, extracting, and substitution.</span></p>



<h1 class="toc">1. Look-ahead &amp; Look-behind</h1><a name="lookaround"></a>

Look-ahead and look-behind operations use syntax that could be confused with grouping (See <a href="http://ocpsoft.com/opensource/guide-to-regular-expressions-in-java-part-1/#grouping">Ch. 1 - Basic Grouping</a>,) but these patterns do not capture values; therefore, using these constructs, no values will be stored for later retrieval, and they do not affect group numbering. Look-ahead operations look forward, starting from their location in the pattern, continuing to the end of the input. Look-behind expressions do not search backwards, but instead start at the beginning of the pattern and continue up to/until the look-behind expression.

E.g.: The statement <code>“my dog is (?!(green|red))\\w+”</code> asserts that <code>‘green’</code> will not the word to the look-ahead’s direct right. In other words: My dog is not green or red, but my dog is blue.

<h4>Look-ahead/behind constructs <span class="faded">(non-capturing)</span> </h4>
<pre lang="perl">
(?:X) 			X, as a non-capturing group
(?=X) 			X, via zero-width positive look-ahead
(?!X) 			X, via zero-width negative look-ahead
(?<=X) 			X, via zero-width positive look-behind
(?<!X) 			X, via zero-width negative look-behind
(?<X) 			X, as an independent, non-capturing group
</pre>

So what does this all mean? What does a look-ahead really do for me?

Say, for example, we wanted to know if our input string contains the word <code>“incident”</code> but that the word <code>“theft”</code> should not be found anywhere. We can use a negative look-ahead to ensure that there are no occurrences.

<blockquote><code>“(?!.*theft).*incident.*”</code></blockquote>

This expression exhibits the following behavior:
<pre lang="java">
"There was a crime incident"			matches
"The incident involved a theft"			does not match
"The theft was a serious incident"		does not match
</pre>

A more complex example is password validation. Let’s say we want to ensure that a password is made at least 8, but at most 12 alphanumeric characters, <em>and at least two numbers, in any position.</em>

We will need to use a look-ahead expression in order to enforce a requirement of two numbers. This look-ahead expression will require any number of characters to be followed by a single digit, followed by any number of characters, and another single digit. E.g.: <code>…4…2</code>, or <code>…42</code>, or <code>42…</code>, or <code>4…2</code>.

<h3 class="toc">1.1. Example</h3>
[snippit filename="Sample code"]import java.util.ArrayList;
import java.util.List;

public class LookaheadDemo {
	public static void main(String[] args) {
		List<String> input = new ArrayList<String>();
		input.add("password");
		input.add("p4ssword");
		input.add("p4ssw0rd");
		input.add("p45sword");

		for (String ssn : input) {
			if (ssn.matches("^(?=.*[0-9].*[0-9])[0-9a-zA-Z]{8,12}$")) {
				System.out.println(ssn + ": matches");
			} else {
				System.out.println(ssn + ": does not match");
			}
		}
	}
}[/snippit]

<h4>This produces the following output:</h4>

<blockquote><code>password: does not match
p4ssword: does not match
p4ssw0rd: matches
p45sword: matches</code></blockquote>

[info]<a href="http://ocpsoft.org/tutorials/regular-expressions/java-visual-regex-tester/#!;t=password%0Ap4ssword%0Ap4ssw0rd%0Ap45sword&r=(%3Fm)%5E(%3F%3D.*%5B0-9%5D.*%5B0-9%5D)%5B0-9a-zA-Z%5D%7B8%2C12%7D%24&x=%240%20VALID" title="Visual Java Regex Tester" target="_blank">Try this example online</a> with our Visual Java Regex Tester[/info]

<h4>Dissecting the pattern:</h4>
<blockquote><code>"^(?=.*[0-9].*[0-9])[0-9a-zA-Z]{8,12}$"</code></blockquote>
<pre lang="perl">
^				match the beginning of the line
(?=.*[0-9].*[0-9]) 		a look-ahead expression, requires 2 digits to be present
.*				match n characters, where n >= 0
[0-9]				match a digit from 0 to 9
[0-9a-zA-Z]			match any numbers or letters
{8,12}				match 8 to 12 of whatever is specified by the last group
$				match the end of the line
</pre>

<p class="warn alert"><span>Multiple look-ahead operations do not evaluate in a specific order. They must all be satisfied equally, and if they logically contradict each other, the pattern will never match.</span></p>


[section]
<h3 class="toc">Visual Regex Tester</h3>
To get a more visual look into how regular expressions work, try our <a href="http://ocpsoft.org/tutorials/regular-expressions/java-visual-regex-tester/" title="Java visual regex tester" target="_blank">visual java regex tester</a>.
[section]

<a name="config"></a><h1 class="toc">2. Configuring the Matching Engine</h1>

Pattern configuration flags for Java appear very similar to look-ahead operations. Flags are used to configure case sensitivity, multi-line matching, and more. Flags can be specified in collections, or as individual statements. Again, these expressions are not literal, and do not capture values.

<h5 class="toc">2.1. Configuration flags</h5>
<pre lang="perl">
(?idmsux-idmsux)  	Turns match flags on - off for entire expression
(?idmsux-idmsux:X)   	X, as a non-capturing group with the given flags on – off
</pre>


<h5 class="toc">2.2. Case insensitivity mode</h5>
<pre lang="perl">
(?i)  			Toggle case insensitivity (default: off, (?-i)) for the text in this group only
</pre>

<h5 class="toc">2.3. UNIX lines mode</h5>
<pre lang="perl">
(?d)  			Enables UNIX line mode (default: off, (?-d)) 
			In this mode, only the '\n' line terminator is recognized in the behavior of ., ^, and $
</pre>



<h5 class="toc">2.4. Multi-line mode</h5>
<pre lang="perl">
(?m)  			Toggle treat newlines as whitespace (default: off, (?-m))
			The ^ and $ expressions will no longer match to the beginning and end of a line,
			respectively, but will match the beginning and end of the entire input sequence/string.
</pre>

<h5 class="toc">2.5. Dot-all mode</h5>
<pre lang="perl">
(?s)  			Toggle dot ‘.’ matches any character (default: off, (?-s))
			Normally, the dot character will match everything except newline characters.
</pre>


<h5 class="toc">2.6. Unicode-case mode</h5>
<pre lang="perl">
(?u)  			Toggle Unicode standard case matching (default: off, (?-u)
			By default, case-insensitive matching assumes that only characters 
			in the US-ASCII charset are being matched.
</pre>



<h5 class="toc">2.7. Comments mode</h5>
<pre lang="perl">
(?x)  			Allow comments in pattern (default: off, (?-x))
			In this mode, whitespace is ignored, and embedded comments starting with '#'
			are ignored until the end of a line. 
</pre>


<h3 class="toc">2.8. Examples</h3>
<h5 class="toc">2.8.1. Global toggle</h5>
In order to toggle flags for the entire expression, the statement must be at the head of the expression.
<pre lang="java">
"(?idx)^I\s lost\s my\s .+     #this comment and all spaces will be ignored"
</pre>
The above expression will ignore case, and will set the dot ‘.’ character to include newlines.

[info]<a href="http://ocpsoft.org/tutorials/regular-expressions/java-visual-regex-tester/#!;t=I%20lost%20my%20wallet&r=(%3Fidx)%5EI%5Cs%20lost%5Cs%20my%5Cs%20.%2B%20%20%20%20%20%23this%20comment%20and%20all%20spaces%20will%20be%20ignored&x=" title="Visual Java Regex Tester" target="_blank">Try this example online</a> with our Visual Java Regex Tester[/info]


<h5 class="toc">2.8.2. Local toggle</h5>
In order to toggle flags for the a single non-capturing group, the group must adhere to the following syntax
<pre lang="java">
"(?idx:Cars)[a-z]+
</pre>
The above expression will ignore case within the group, but adhere to case beyond.

[info]<a href="http://ocpsoft.org/tutorials/regular-expressions/java-visual-regex-tester/#!;t=cars%20and%20Cars&r=(%3Fidx%3ACars)&x=" title="Visual Java Regex Tester" target="_blank">Try this example online</a> with our Visual Java Regex Tester[/info]

<h5 class="toc">2.8.3. Applied in Java</h5>
[snippit filename="Sample code"]
public class ConfigurationDemo {
	public static void main(String[] args) {
		String input = "My dog is Blue.\n" +
				"He is not red or green.";

		Boolean controlResult = input.matches("(?=.*Green.*).*Blue.*");
		Boolean caseInsensitiveResult = input.matches("(?i)(?=.*Green.*).*Blue.*");
		Boolean dotallResult = input.matches("(?s)(?=.*Green.*).*Blue.*");
		Boolean configuredResult = input.matches("(?si)(?=.*Green.*).*Blue.*");
		
		System.out.println("Control result was: " + controlResult);
		System.out.println("Case ins. result was: " + caseInsensitiveResult);
		System.out.println("Dot-all result was: " + dotallResult);
		System.out.println("Configured result was: " + configuredResult);
	}
}[/snippit]


<h4>This produces the following output:</h4>
<blockquote><code>Control result was: false
Case insensitive result was: false
Dot-all result was: false
Configured result was: true</code></blockquote>

<h4>Dissecting the pattern:</h4>

<pre lang="java">
"(?si)(?=.*Green.*).*Blue.*"
</pre>

<pre lang="perl">
(?si)			turn on case insensitivity and dotall modes
(?=.*Green.*) 		‘Green’ must be found somewhere to the right of this look-ahead
.*Blue.*		‘Blue’ must be found somewhere in the input
</pre>

We had to enable multi-line and case-insensitive modes for our pattern to match.

The look-ahead in this example is very similar to the pattern itself, and in this case, the pattern could be substituted for another look-ahead. Because we don’t care in which order we find these two items, the way this is written, substituting “<code>(?=.*Blue.*)</code>” for “<code>.*Blue.*</code>” would be an acceptable change; however, if we did care in which order we wanted to find these colors, we would need to be more precise with our ordering. If we wanted to ensure that the ‘Green’ came after ‘Blue’ we would need to move the look-ahead as seen below, and so on.

<pre lang="java">
"(?si).*Blue.*(?=.*Green.*)"
</pre>

<h1>3. Conclusion</h1><a name="conclude"></a>

Regular expressions provide an extremely flexible and powerful text processing system. Try to imagine doing this work using <strong>String.substring(...)</strong> or <strong>String.indexOf(...)</strong>, with loops, nested loops, and dozens of <code>if</code> statements. I don't even want to try... so play around! Think about using regular expressions next time you find yourself doing text or pattern manipulation with looping and other painful methods. Let us know how you do.

<p class="tip alert"><span>This article is part two in the series: "Guide to Regular Expressions in Java." Read <a href="http://ocpsoft.com/opensource/guide-to-regular-expressions-in-java-part-1/">part one</a> for more information on basic matching, grouping, extracting, and substitution.</span></p>