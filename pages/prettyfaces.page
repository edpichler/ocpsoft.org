.categories ['Uncategorized']
.dateCreated 20081114T19:16:56
.excerpt 
.link http://ocpsoft.org/prettyfaces/
.mt_allow_comments 1
.mt_allow_pings 1
.page_id 26
.page_status publish
.permaLink http://ocpsoft.org/prettyfaces/
.text_more 
.title PrettyFaces
.userid 3
.wp_author Lincoln Baxter III
.wp_author_display_name Lincoln Baxter III
.wp_author_id 3
.wp_page_order 1
.wp_page_parent_id 0
.wp_page_parent_title 
.wp_page_template page-notitle.php
.wp_password 
.wp_slug prettyfaces
[toc/]

<h1 class="project-header notoc">prettyfaces</h1>

<center>
<h2 style="margin-bottom: 25px; margin-left: 25px; margin-right: 25px;">The open-source <font color="green">/url/#{rewriting}</font> solution for Servlet, JSF, and Java EE</h2></center>

<div class="featured">
<p style="margin-top: 10px; margin-bottom: 0px;">PrettyFaces is an OpenSource URL-rewriting library with enhanced support for <em>JavaServer Faces</em> - JSF 1.1, 1.2 and 2.0 - enabling creation of bookmark-able, pretty URLs. PrettyFaces solves the "RESTful URL" problem elegantly, including features such as: page-load actions, seamless integration with faces navigation, dynamic view-id assignment, managed parameter parsing, and configuration-free compatibility with other web frameworks. <a href="#features">Take a look at the features &raquo;</a></p>
</div>


<h2>SEO and Consistency:</h2>
Any business knows how important Search Engine Optimization can be for sales. PrettyFaces allows SEO-friendly URLs, and improved customer experience. Give your site a uniform, well understood feeling, from the address bar to the buy button.

<p style="margin-bottom: 10px;">

<h2><span class="toc">Get Started</span>, it's easy! (3 steps)</h2>

[warn]It is recommended but not required to remove other URL-rewriting tools from your application before using PrettyFaces and/or [[Rewrite]]. If you choose to leave them in place, weird things may happen to you, be warned.[/warn]

<center>
<p style="margin: 20px;">Come join us on in <code>#ocpsoft</code> - <a href="http://webchat.freenode.net/?channels=%23ocpsoft" title="OCPsoft channel on Freenode IRC" target="_blank">our channel on irc.freenode.net.</a> Additionally, you are welcome to attend the dev meeting, every [[Calendar|Monday at 1pm EST]]. Also, please join the discussion on our <a href="mailto:prettyfaces-dev@googlegroups.com">dev email list</a>.</p>
</center>

[section]


<h2 class="toc">1. Include PrettyFaces in your Project</h2>

<p>You may either use Maven (recommended) to include PrettyFaces in your project, or you can download the distribution ZIP file directly. 

[info]If you are upgrading from PrettyFaces 3.x, note that all functionality is backwards compatible, but you may wish to review the <a href="http://ocpsoft.org/rewrite/docs/migration/prettyfaces3" target="_blank">migration guide</a> to learn about new features made available in the latest releases.[/info]

<a name="download"></a>
[snippit filename="Add PrettyFaces to your maven pom.xml" href="http://repo1.maven.org/maven2/org/ocpsoft/rewrite/rewrite-distribution/" label="Or download the ZIP"]
<!-- for JSF 2.x -->
<dependency>
    <groupId>org.ocpsoft.rewrite</groupId>
    <artifactId>rewrite-servlet</artifactId>
    <version>2.0.11.Final</version>
</dependency>
<dependency>
    <groupId>org.ocpsoft.rewrite</groupId>
    <artifactId>rewrite-config-prettyfaces</artifactId>
    <version>2.0.11.Final</version>
</dependency>
[/snippit]

(If you use an older version of JSF, you will want to use the <a href="javascript:" data-toggle="collapse" data-target="#legacyjsf">legacy PrettyFaces JSF 1.x dependency instead:</a>)

<div id="legacyjsf" class="collapse">

[code]
<!-- for JSF 1.2.x (yea, we know the version number is confusing. sorry!)-->
<dependency>
   <groupId>com.ocpsoft</groupId>
   <artifactId>prettyfaces-jsf12</artifactId>
   <version>3.3.3</version>
</dependency>
[/code]

</div>

<h2 class="toc">2. Create pretty-config.xml</h2>

<p>This is where you will create URL mappings between external URL patterns and your internal view files, Servlets, and other resources. Be sure to replace the mapping below with a mapping that matches your application.

[snippit filename="/WEB-INF/pretty-config.xml"]
<pretty-config xmlns="http://ocpsoft.org/schema/rewrite-config-prettyfaces" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
  xsi:schemaLocation="http://ocpsoft.org/schema/rewrite-config-prettyfaces
                      http://ocpsoft.org/xml/ns/prettyfaces/rewrite-config-prettyfaces.xsd">

	<url-mapping id="login">
		<pattern value="/login" />
		<view-id value="/legacy/user/login.jsp" />
	</url-mapping>

</pretty-config>
[/snippit]

<h3>Add mappings to your configuration</h3>

<p>This part is all up to you! You'll need to figure out which URLs in your application you want to "prettify" - so check out the [[PrettyFaces Docs|documentation]] for details on how to fully utilize the PrettyFaces URL-mapping system.

<p>Additionally, be sure to check out the <a href="http://ocpsoft.org/rewrite/examples/" title="URL Rewriting Examples" target="_blank">Rewrite examples</a> or <a href="http://ocpsoft.org/rewrite/docs/" target="_blank">reference manual</a> to learn more about [[Rewrite]], and the powerful options it offers beyond the PrettyFaces configuration module.
 
[code]
<url-mapping id="view-user">
	<pattern value="/user/{username}" />
	<view-id value="/user/view.xhtml" />
</url-mapping>

<!-- Maps "/user/{username}" to the URL "/user/view.xhtml?username=value" -->
[/code]

<h2 class="toc">3. Run your application!</h2>
You should now be ready to go! PrettyFaces is installed and your first URL-mapping has been created. If everything has been done correctly, you should see PrettyFaces log a message confirming that setup was successful.

[command]
INFO  [org.ocpsoft.rewrite.servlet.RewriteFilter] RewriteFilter starting up...
...
INFO  [org.ocpsoft.rewrite.servlet.RewriteFilter] Loaded [] org.ocpsoft.rewrite.config.ConfigurationProvider [org.ocpsoft.rewrite.prettyfaces.PrettyFacesRewriteConfigurationProvider<1>]
INFO  [org.ocpsoft.rewrite.servlet.RewriteFilter] RewriteFilter initialized.[/command]


[section]


<h2 class="toc">Documentation (Need help?)</h2> 

<p>Ask a question in the <a href="http://ocpsoft.org/support/prettyfaces-users/">forums</a>, view the <a href="http://ocpsoft.org/prettyfaces/docs/">documentation</a>, <a href="#FAQ">FAQ</a>, or get the <a href="https://github.com/ocpsoft/prettyfaces" target="_blank">source</a>!</p>

<br/>
<a name="getinvolved"></a>
<div class="featured">
<p style="margin-top: 10px; margin-bottom: 0px;">
<h2 style="margin-top: 0px;" class="toc">Get involved</h2>
<strong>Source</strong>: <a href="https://github.com/ocpsoft/prettyfaces">https://github.com/ocpsoft/prettyfaces</a><br/>
<strong>Forums</strong>: <a href="http://ocpsoft.org/support/prettyfaces-users">http://ocpsoft.org/support/forum/rewrite</a><br/>
<strong>Get updates</strong>: <a href="http://ocpsoft.org/subscribe/">http://ocpsoft.org/subscribe/</a><br/>
</p><p>
Having trouble? Have an idea? <a href="https://github.com/ocpsoft/prettyfaces/issues" title="Report an issue">Report an issue.</a> </p>
</div>

[section]

<a name="features"></a>
<h1>Features</h1>
<p>
<ol>
	<li><strong>URL Rewriting</strong> -- Replace ugly URLs: "/faces/page.jsf" with pretty, SEO-friendly, human URLS: "/optimized/page/"; The client browser never sees your original URLs, even in the source-HTML</li>
	<li><strong>Dynamic view IDs</strong> -- Now with dynamic view ID mapping for URLs (through El method expressions,) you can show different views based on run-time conditions, effectively de-coupling the URL from the JSF view.</li>
	<li><strong>Page-load actions</strong> -- Call one or more action-methods, at one or more phases, before rendering a view.</li>
	<li><strong>Managed parameter parsing</strong> -- HTTP parameters parsed from URLs are stored in managed beans, simply get a reference to your parameter bean for easy access from other Java classes.</li>
	<li><strong>Navigation by ID</strong> -- Define your page IDs in one place, reference them easily in action-methods and components, using standard JSF navigation techniques.</li>
	<li><strong>Integrated validation</strong> -- For URL and query-parameters, able to re-use existing JSF validator objects.</li>
	<li><strong>Easy to configure</strong> -- Requires absolutely minimal configuration; may be enabled using XML or annotations.</li>
</ol>
</p>


[info]View the <a href="http://ocpsoft.org/prettyfaces/docs" target="_self">documentation</a>.[/info]


<h3>What makes PrettyFaces different:</h3>
View a slideshare presentation on <a href="http://ocpsoft.org/prettyfaces/jsfsummit-2009-prettyfaces-makes-an-appearance/" target="_self">why URL Rewriting is important</a>, or a brief overview of the <a href="http://ocpsoft.org/uncategorized/jsf-get-bookmarkable-and-pretty-urls/">problems PrettyFaces solves</a>.

<a name="in2minutes"></a>
<center class="featured"><object width="640" height="505"><param name="movie" value="http://www.youtube.com/v/1kicjmLsN3w&hl=en_US&fs=1&color1=0x006699&color2=0x54abd6"></param><param name="allowFullScreen" value="true"></param><param name="allowscriptaccess" value="always"></param><embed src="http://www.youtube.com/v/1kicjmLsN3w&hl=en_US&fs=1&color1=0x006699&color2=0x54abd6" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="640" height="505"></embed></object><h3>Why not <a href="http://ocpsoft.org/prettyfaces/docs/">try PrettyFaces</a> now?.</h3></center>

<a name="FAQ"></a>
<h1>FAQ</h1>
<ol>
	<li><h3>Q. Can I use PrettyFaces to handle URL-rewriting for other resources on my server as well?</h3>
	<p>
	A. Yes. PrettyFaces still requires a configured JSF instance to function, but it can be used to map a URL to any resource in the Servlet Container - without invoking FacesServlet. Values will be injected into JSF beans as usual, but PrettyFaces Action methods will not trigger (since no JSF lifecycle executes for non-Faces requests.)
	<p>
	For example:
[snippit filename="pretty-config.xml"]
<pretty-config xmlns="http://ocpsoft.org/schema/rewrite-config-prettyfaces" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
  xsi:schemaLocation="http://ocpsoft.org/schema/rewrite-config-prettyfaces
                      http://ocpsoft.org/xml/ns/prettyfaces/rewrite-config-prettyfaces.xsd">
	<url-mapping id="login">
		<pattern value="/login" />
		<view-id value="/legacy/user/login.jsp" /> <!-- Non JSF View Id -->
	</url-mapping>
	<url-mapping id="register">
		<pattern value="/register" />
		<view-id value="/faces/user/register.jsf" /> <!-- JSF View Id -->
	</url-mapping>
</pretty-config>
[/snippit]
	</li>
	
	<li><h3>Q. Why do my Tomahawk / MyFaces components, or other 3rd party addons, break when I use PrettyFaces?</h3>
	<p>
	A. Since PrettyFaces intercepts mapped HttpRequests then forwards those requests to JSF, it is necessary to enable any additional filters between PrettyFaces and JSF to listen to Servlet Forwards. This is done in the <b>web.xml</b> deployment descriptor by adding the following dispatcher elements to any needed Filters:
	<p>
	For example:
[snippit filename="web.xml"]
<filter-mapping>
	<filter-name>springSecurityFilterChain</filter-name>
	<url-pattern>/*</url-pattern>
	<dispatcher>FORWARD</dispatcher>
	<dispatcher>REQUEST</dispatcher>
</filter-mapping>
[/snippit]
	</li>
	<li>
	
	<h3>Q. Why, when using MyFaces, am I getting a NullPointerException when I try to use normal faces-navigation?</h3>
	<p>
	A. Some MyFaces versions do not completely comply with the JSF specification, thus the ViewRoot is null when the request is processed. There is a <a href="http://groups.google.com/group/prettyfaces-users/browse_thread/thread/134228ec728edd24">patch/workaround</a>, which can be added to fix this issue. You must add this ViewHandler to your faces-config.xml.
	</li>
	
	<li>
	<h3>Q. Can I configure PrettyFaces via Annotations?</h3>
	<p>
	A. Yes! Thanks to Christian Kapolteth, PrettyFaces has Annotations support as of version 3.0.2-SNAPSHOT
	</li>
	
	<li>
	<h3>Q. How do I enable logging, so that I can tell what the heck is really going on?</h3>
	<p>
	A. Create or update your log4j.properties file with the following values:
[snippit filename="log4j.properties"]
### direct log messages to stdout ###
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target=System.out
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d{ABSOLUTE} %5p %c{1}:%L - %m%n

log4j.rootLogger=warn, stdout

### Log for OCPsoft
log4j.logger.com.ocpsoft=info
[/snippit] 
	</li>
	
	<li>
	<h3>Q. Can I map and process URLs that span a dynamic number of '/' characters?</h3>
	<p>
	A. Yes, please read <a href="http://ocpsoft.org/prettyfaces/docs/#customparsing">section 3.4</a> of the docs.
	</li>
	
	<li>
	<h3>Q. How do I save FacesMessage objects after performing a redirect or pretty:redirect?</h3>
	<p>
	A. You need to configure the optional MultiPageMessagesSupport PhaseListener (or something like it)

[snippit filename="faces-config.xml"]
<?xml version='1.0' encoding='UTF-8'?>
<faces-config xmlns="http://java.sun.com/xml/ns/javaee" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
	http://java.sun.com/xml/ns/javaee/web-facesconfig_2_0.xsd"
	version="1.2">
	<lifecycle>
		<phase-listener>
			com.ocpsoft.pretty.application.MultiPageMessagesSupport
		</phase-listener>
	</lifecycle>
</faces-config>
[/snippit]

	See <a href="http://ocpsoft.org/java/persist-and-pass-facesmessages-over-page-redirects/">this article</a> for a full explanation of how this works.
	</li>
	
	<li>
	<h3>Q. Does PrettyFaces work on IBM's WebSphere?</h3>
	<p>
	A. Yes, but websphere requires a custom setting in order to behave like a sane server.
	<a href='http://ocpsoft.org/wp-content/uploads/2009/08/filtercompat.gif'><img src="http://ocpsoft.org/wp-content/uploads/2009/08/filtercompat.gif" alt="WAS 6.1+ Filter Compatability" title="Filter-Compat-WAS61" width="500" height="239" class="aligncenter size-full wp-image-69" /></a>
	</li>
</ol>
<br/><br/>



<h2 class="toc">Support us - Donate</h2>

We welcome <a href="/donate/">donations</a> to continue providing a home to the OCPsoft open-source projects. Or, if you like this project, you can become <a href="http://ocpsoft.org/prettyfaces/powered/">powered by PrettyFaces</a>. All donations go directly to offset our web hosting costs.